import transformers
from transformers import pipeline
from langchain.chains import LLMChain
from langchain import PromptTemplate
from docx import Document
from huggingface_hub import login

#login(token="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")

generic_template = '''Generate a summary of the following document text with a minimum of 50 words.
If the summary is shorter than 150 words, add more details to make it longer::
document: {document}
Summary length: 50 tokens.'''
prompt = PromptTemplate(input_variables=["document"], template=generic_template)

model_cache = {}
def create_summarizer(model_name):
    if model_name not in model_cache:
        try:
            summarizer = pipeline("text2text-generation", model=model_name, max_length=500, num_beams=4, early_stopping=True)
            model_cache[model_name] = summarizer
        except Exception as e:
            print(f"Error loading model '{model_name}': {e}")
            return None
    return model_cache.get(model_name)

def generate_summaries(paragraph_texts, summarizers):
    summaries = {}
    for model_name, (summarizer, document) in summarizers.items():
        if summarizer is not None:
            try:
                # Convert document to text
                document_text = '\n'.join([p.text for p in document.paragraphs])
                # Use the prompt template to format the final prompt
                final_prompt = prompt.format(document=document_text)
                summary = summarizer(final_prompt, max_length=500, num_beams=4, early_stopping=True)
                if isinstance(summary, list):
                    summaries[model_name] = summary[0]['generated_text']
                else:
                    summaries[model_name] = summary['generated_text']
            except Exception as e:
                print(f"Error generating summary for '{model_name}': {e}")
        else:
            print(f"Skipping '{model_name}' (model not loaded)")
    return summaries


def main(filename):
    document = Document(filename)
    paragraph_texts = [p.text for p in document.paragraphs]
    model_names = [
      "google-t5/t5-base",
       "google/flan-t5-base",
    ]

    summarizers = {model_name: (create_summarizer(model_name), document) for model_name in model_names}
    summaries = generate_summaries(paragraph_texts, summarizers)

    for model_name, summary in summaries.items():
        print(f"Summary generated by {model_name}:\n\n{summary}\n\n" )

if __name__ == "__main__":
    main('TOP.docx')
